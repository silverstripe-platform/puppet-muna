#!/usr/bin/env php
<?php

include __DIR__.'/_muna_functions.php';

if(empty($argv[1])) {
    quit("vhost must be passed as the first argument", 2);
}
$vhost = str_replace('-prod', '', $argv[1]);

if(!file_exists(NAMESPACE_CONFIG_PATH)) {
    quit(sprintf("Muna config file '%s' is missing", NAMESPACE_CONFIG_PATH));
}

$namespaces = parse_ini_file(NAMESPACE_CONFIG_PATH, true);
if(!is_array($namespaces) || empty($namespaces)) {
    quit("No namespaces configured in namespaces.ini");
}

$outputPath = sprintf('/var/secrets/%s', $vhost);
if (!file_exists($outputPath) || !is_dir($outputPath)) {
    mkdir($outputPath, 0755, true);
}

$outputTemporaryPath = sprintf("%s/muna_tmp_%s", sys_get_temp_dir(), uniqid());
mkdir($outputTemporaryPath);

// Loop through each vault and obtain any secrets in them
foreach($namespaces as $vault => $vaultKeys) {
    if (isset($vaultKeys['vhost']) && $vaultKeys['vhost']) {
        $path = sprintf('%s/%s/secrets', $vaultKeys["path"], $vhost);
    } else {
        $path = sprintf('%s/secrets', $vaultKeys["path"]);
    }

    output(sprintf("Processing secrets for namespace '%s' and saving into '%s'", $path, $outputTemporaryPath));
    $command = [
        '/opt/muna/bin/muna export',
        escapeshellarg($path),
        '--region',
        escapeshellarg(getenv('AWS_REGION')),
        '--as-files',
        '--output',
        $outputTemporaryPath,
    ];

    $ret = exec(implode(' ', $command), $returnOutput, $exitCode);

    if($exitCode != 0) {
        quit(sprintf(
            "Unable to download path '%s' for '%s'. Exit code: '%s', response: %s",
            $path,
            $vhost,
            $exitCode,
            $ret
        ), $exitCode);
    }
}

// Ensure the permissions and ownership of the new secrets are correct
exec(sprintf("find %s -type d -exec chmod 0755 {} +", $outputTemporaryPath));
exec(sprintf("find %s -type f -exec chown www-data:www-data {} +", $outputTemporaryPath));
exec(sprintf("find %s -type f -exec chmod 0440 {} +", $outputTemporaryPath));

// Move the secrets from the temporary folder into the new one
$directory = glob(sprintf("%s/*", $outputTemporaryPath));
foreach($directory as $file) {
    $newFile = sprintf('%s/%s', $outputPath, basename($file));
    output(sprintf("Moving file '%s' to '%s'", $file, $newFile));
    rename($file, $newFile);
}

// Delete the temporary directory
exec(sprintf('rm -rf %s', escapeshellarg($outputTemporaryPath)));

output(sprintf("Secrets configured for '%s'", $vhost));
